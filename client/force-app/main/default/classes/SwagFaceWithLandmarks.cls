/*
 * imageapi
 * Image Recognition and Processing APIs let you use Machine Learning to recognize and process images, and also perform useful image modification operations.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/**
 * Location of one face in an image
 */
public class SwagFaceWithLandmarks implements Swagger.MappedProperties {
    /**
     * X coordinate of the left side of the face
     * @return leftX
     */
    public Integer leftX { get; set; }

    /**
     * Y coordinate of the top side of the face
     * @return topY
     */
    public Integer topY { get; set; }

    /**
     * X coordinate of the right side of the face
     * @return rightX
     */
    public Integer rightX { get; set; }

    /**
     * Y coordinate of the bottom side of the face
     * @return bottomY
     */
    public Integer bottomY { get; set; }

    /**
     * Point locations of the left eyebrow (the eyebrow cloesest to the left side of the picture)
     * @return leftEyebrow
     */
    public List<SwagFacePoint> leftEyebrow { get; set; }

    /**
     * Point locations of the right eyebrow (the eyebrow cloesest to the right side of the picture)
     * @return rightEyebrow
     */
    public List<SwagFacePoint> rightEyebrow { get; set; }

    /**
     * Point locations of the left eye (the eye closest to the left side of the picture)
     * @return leftEye
     */
    public List<SwagFacePoint> leftEye { get; set; }

    /**
     * Point locations of the right eye (the eye closest to the right side of the picture)
     * @return rightEye
     */
    public List<SwagFacePoint> rightEye { get; set; }

    /**
     * Point locations of the bottom and sides of the face (cheeks and chin)
     * @return bottomAndSidesOfFace
     */
    public List<SwagFacePoint> bottomAndSidesOfFace { get; set; }

    /**
     * Point locations of the nose bridge (the vertical portion of the nose)
     * @return noseBridge
     */
    public List<SwagFacePoint> noseBridge { get; set; }

    /**
     * Point locations of the bottom (nostrils) of the nose
     * @return noseBottom
     */
    public List<SwagFacePoint> noseBottom { get; set; }

    /**
     * Point locations of the inner outline of the lips
     * @return lipsInnerOutline
     */
    public List<SwagFacePoint> lipsInnerOutline { get; set; }

    /**
     * Point locations of the outer outline of the lips
     * @return lipsOuterOutline
     */
    public List<SwagFacePoint> lipsOuterOutline { get; set; }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'LeftX' => 'leftX',
        'TopY' => 'topY',
        'RightX' => 'rightX',
        'BottomY' => 'bottomY',
        'LeftEyebrow' => 'leftEyebrow',
        'RightEyebrow' => 'rightEyebrow',
        'LeftEye' => 'leftEye',
        'RightEye' => 'rightEye',
        'BottomAndSidesOfFace' => 'bottomAndSidesOfFace',
        'NoseBridge' => 'noseBridge',
        'NoseBottom' => 'noseBottom',
        'LipsInnerOutline' => 'lipsInnerOutline',
        'LipsOuterOutline' => 'lipsOuterOutline'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    public SwagFaceWithLandmarks() {
        leftEyebrow = new List<SwagFacePoint>();
        rightEyebrow = new List<SwagFacePoint>();
        leftEye = new List<SwagFacePoint>();
        rightEye = new List<SwagFacePoint>();
        bottomAndSidesOfFace = new List<SwagFacePoint>();
        noseBridge = new List<SwagFacePoint>();
        noseBottom = new List<SwagFacePoint>();
        lipsInnerOutline = new List<SwagFacePoint>();
        lipsOuterOutline = new List<SwagFacePoint>();
    }

    public static SwagFaceWithLandmarks getExample() {
        SwagFaceWithLandmarks faceWithLandmarks = new SwagFaceWithLandmarks();
        faceWithLandmarks.leftX = 123;
        faceWithLandmarks.topY = 123;
        faceWithLandmarks.rightX = 123;
        faceWithLandmarks.bottomY = 123;
        faceWithLandmarks.leftEyebrow = new List<SwagFacePoint>{SwagFacePoint.getExample()};
        faceWithLandmarks.rightEyebrow = new List<SwagFacePoint>{SwagFacePoint.getExample()};
        faceWithLandmarks.leftEye = new List<SwagFacePoint>{SwagFacePoint.getExample()};
        faceWithLandmarks.rightEye = new List<SwagFacePoint>{SwagFacePoint.getExample()};
        faceWithLandmarks.bottomAndSidesOfFace = new List<SwagFacePoint>{SwagFacePoint.getExample()};
        faceWithLandmarks.noseBridge = new List<SwagFacePoint>{SwagFacePoint.getExample()};
        faceWithLandmarks.noseBottom = new List<SwagFacePoint>{SwagFacePoint.getExample()};
        faceWithLandmarks.lipsInnerOutline = new List<SwagFacePoint>{SwagFacePoint.getExample()};
        faceWithLandmarks.lipsOuterOutline = new List<SwagFacePoint>{SwagFacePoint.getExample()};
        return faceWithLandmarks;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof SwagFaceWithLandmarks) {
            SwagFaceWithLandmarks faceWithLandmarks = (SwagFaceWithLandmarks) obj;
            return this.leftX == faceWithLandmarks.leftX
                && this.topY == faceWithLandmarks.topY
                && this.rightX == faceWithLandmarks.rightX
                && this.bottomY == faceWithLandmarks.bottomY
                && this.leftEyebrow == faceWithLandmarks.leftEyebrow
                && this.rightEyebrow == faceWithLandmarks.rightEyebrow
                && this.leftEye == faceWithLandmarks.leftEye
                && this.rightEye == faceWithLandmarks.rightEye
                && this.bottomAndSidesOfFace == faceWithLandmarks.bottomAndSidesOfFace
                && this.noseBridge == faceWithLandmarks.noseBridge
                && this.noseBottom == faceWithLandmarks.noseBottom
                && this.lipsInnerOutline == faceWithLandmarks.lipsInnerOutline
                && this.lipsOuterOutline == faceWithLandmarks.lipsOuterOutline;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (leftX == null ? 0 : System.hashCode(leftX));
        hashCode = (17 * hashCode) + (topY == null ? 0 : System.hashCode(topY));
        hashCode = (17 * hashCode) + (rightX == null ? 0 : System.hashCode(rightX));
        hashCode = (17 * hashCode) + (bottomY == null ? 0 : System.hashCode(bottomY));
        hashCode = (17 * hashCode) + (leftEyebrow == null ? 0 : System.hashCode(leftEyebrow));
        hashCode = (17 * hashCode) + (rightEyebrow == null ? 0 : System.hashCode(rightEyebrow));
        hashCode = (17 * hashCode) + (leftEye == null ? 0 : System.hashCode(leftEye));
        hashCode = (17 * hashCode) + (rightEye == null ? 0 : System.hashCode(rightEye));
        hashCode = (17 * hashCode) + (bottomAndSidesOfFace == null ? 0 : System.hashCode(bottomAndSidesOfFace));
        hashCode = (17 * hashCode) + (noseBridge == null ? 0 : System.hashCode(noseBridge));
        hashCode = (17 * hashCode) + (noseBottom == null ? 0 : System.hashCode(noseBottom));
        hashCode = (17 * hashCode) + (lipsInnerOutline == null ? 0 : System.hashCode(lipsInnerOutline));
        hashCode = (17 * hashCode) + (lipsOuterOutline == null ? 0 : System.hashCode(lipsOuterOutline));
        return hashCode;
    }
}

