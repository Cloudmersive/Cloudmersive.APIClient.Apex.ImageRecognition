/*
 * imageapi
 * Image Recognition and Processing APIs let you use Machine Learning to recognize and process images, and also perform useful image modification operations.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/**
 * Metadata from an image
 */
public class SwagImageMetadata implements Swagger.MappedProperties {
    /**
     * True if the operation was successful, false otherwise
     * @return successful
     */
    public Boolean successful { get; set; }

    /**
     * True if the input image is a valid image file, false otherwise
     * @return isValidImage
     */
    public Boolean isValidImage { get; set; }

    /**
     * File format of the image
     * @return fileFormat
     */
    public String fileFormat { get; set; }

    /**
     * Width of the image in pixels
     * @return width
     */
    public Integer width { get; set; }

    /**
     * Height of the image in pixels
     * @return height
     */
    public Integer height { get; set; }

    /**
     * Bits per pixel
     * @return bitDepth
     */
    public Integer bitDepth { get; set; }

    /**
     * True if the image has transaprency in the form of an alpha channel, false otherwise
     * @return hasTransparency
     */
    public Boolean hasTransparency { get; set; }

    /**
     * Color space of the image
     * @return colorSpace
     */
    public String colorSpace { get; set; }

    /**
     * Name of the EXIF profile used
     * @return exifProfileName
     */
    public String exifProfileName { get; set; }

    /**
     * EXIF tags and values embedded in the image
     * @return exifValues
     */
    public List<SwagImageMetadataExifValue> exifValues { get; set; }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'Successful' => 'successful',
        'IsValidImage' => 'isValidImage',
        'FileFormat' => 'fileFormat',
        'Width' => 'width',
        'Height' => 'height',
        'BitDepth' => 'bitDepth',
        'HasTransparency' => 'hasTransparency',
        'ColorSpace' => 'colorSpace',
        'ExifProfileName' => 'exifProfileName',
        'ExifValues' => 'exifValues'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    public SwagImageMetadata() {
        exifValues = new List<SwagImageMetadataExifValue>();
    }

    public static SwagImageMetadata getExample() {
        SwagImageMetadata imageMetadata = new SwagImageMetadata();
        imageMetadata.successful = true;
        imageMetadata.isValidImage = true;
        imageMetadata.fileFormat = 'aeiou';
        imageMetadata.width = 123;
        imageMetadata.height = 123;
        imageMetadata.bitDepth = 123;
        imageMetadata.hasTransparency = true;
        imageMetadata.colorSpace = 'aeiou';
        imageMetadata.exifProfileName = 'aeiou';
        imageMetadata.exifValues = new List<SwagImageMetadataExifValue>{SwagImageMetadataExifValue.getExample()};
        return imageMetadata;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof SwagImageMetadata) {
            SwagImageMetadata imageMetadata = (SwagImageMetadata) obj;
            return this.successful == imageMetadata.successful
                && this.isValidImage == imageMetadata.isValidImage
                && this.fileFormat == imageMetadata.fileFormat
                && this.width == imageMetadata.width
                && this.height == imageMetadata.height
                && this.bitDepth == imageMetadata.bitDepth
                && this.hasTransparency == imageMetadata.hasTransparency
                && this.colorSpace == imageMetadata.colorSpace
                && this.exifProfileName == imageMetadata.exifProfileName
                && this.exifValues == imageMetadata.exifValues;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (successful == null ? 0 : System.hashCode(successful));
        hashCode = (17 * hashCode) + (isValidImage == null ? 0 : System.hashCode(isValidImage));
        hashCode = (17 * hashCode) + (fileFormat == null ? 0 : System.hashCode(fileFormat));
        hashCode = (17 * hashCode) + (width == null ? 0 : System.hashCode(width));
        hashCode = (17 * hashCode) + (height == null ? 0 : System.hashCode(height));
        hashCode = (17 * hashCode) + (bitDepth == null ? 0 : System.hashCode(bitDepth));
        hashCode = (17 * hashCode) + (hasTransparency == null ? 0 : System.hashCode(hasTransparency));
        hashCode = (17 * hashCode) + (colorSpace == null ? 0 : System.hashCode(colorSpace));
        hashCode = (17 * hashCode) + (exifProfileName == null ? 0 : System.hashCode(exifProfileName));
        hashCode = (17 * hashCode) + (exifValues == null ? 0 : System.hashCode(exifValues));
        return hashCode;
    }
}

