/*
 * imageapi
 * Image Recognition and Processing APIs let you use Machine Learning to recognize and process images, and also perform useful image modification operations.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

public class SwagEditApi {
    SwagClient client;

    public SwagEditApi(SwagClient client) {
        this.client = client;
    }

    public SwagEditApi() {
        this.client = new SwagClient();
    }

    public SwagClient getClient() {
        return this.client;
    }

    /**
     * Normalizes image rotation and removes EXIF rotation data
     * Automatically orients the input image based on EXIF information and then removes the EXIF information.  EXIF is an additional set of information stored in some images taken with cell phone cameras based on the orientation of the camera.  By normalizing rotation and removing EXIF data these images become much easier to process.
     * @param imageFile Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported. (required)
     * @return Blob
     * @throws Swagger.ApiException if fails to make API call
     */
    public Blob editAutoOrient(Map<String, Object> params) {
        client.assertNotNull(params.get('imageFile'), 'imageFile');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('imageFile', (Blob) params.get('imageFile')));

        return (Blob) client.invoke(
            'POST', '/image/edit/auto-orient/remove-exif', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            Blob.class
        );
    }
    /**
     * Composite two images together
     * Composites two input images together; a layered image onto a base image.  The first image you input is the base image.  The second image (the layered image) will be composited on top of this base image.  Supports PNG transparency.  To control padding you can include transparent pixels at the border(s) of your layered images as appropriate.
     * @param location Location to composite the layered images; possible values are: &quot;center&quot;, &quot;top-left&quot;, &quot;top-center&quot;, &quot;top-right&quot;, &quot;center-left&quot;, &quot;center-right&quot;, &quot;bottom-left&quot;, &quot;bottom-center&quot;, &quot;bottom-right&quot; (required)
     * @param baseImage Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported. (required)
     * @param layeredImage Image to layer on top of the base image. (required)
     * @return Blob
     * @throws Swagger.ApiException if fails to make API call
     */
    public Blob editCompositeBasic(Map<String, Object> params) {
        client.assertNotNull(params.get('location'), 'location');
        client.assertNotNull(params.get('baseImage'), 'baseImage');
        client.assertNotNull(params.get('layeredImage'), 'layeredImage');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('baseImage', (Blob) params.get('baseImage')));
        form.addAll(client.makeParam('layeredImage', (Blob) params.get('layeredImage')));

        return (Blob) client.invoke(
            'POST', '/image/edit/composite/{location}', '',
            query, form,
            new Map<String, Object>{
                'location' => (String) params.get('location')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            Blob.class
        );
    }
    /**
     * Adaptively adjust the contrast of the image to be more appealing and easy to see
     * Uses Gamma to adjust the contrast adaptively the way the human eye sees the world.  Results significantly improve the viewability and visual appeal of the image.
     * @param gamma Gamma value to adjust the contrast in the image.  Recommended value is 2.0.  Values between 0.0 and 1.0 will reduce contrast, while values above 1.0 will increase contrast. (required)
     * @param imageFile Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported. (required)
     * @return Blob
     * @throws Swagger.ApiException if fails to make API call
     */
    public Blob editContrastAdaptive(Map<String, Object> params) {
        client.assertNotNull(params.get('gamma'), 'gamma');
        client.assertNotNull(params.get('imageFile'), 'imageFile');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('imageFile', (Blob) params.get('imageFile')));

        return (Blob) client.invoke(
            'POST', '/image/edit/contrast/{gamma}/adaptive', '',
            query, form,
            new Map<String, Object>{
                'gamma' => (Double) params.get('gamma')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            Blob.class
        );
    }
    /**
     * Crop an image to a rectangular area
     * Crop an image to a target rectangular area
     * @param left The left edge of the rectangular crop area in pixels (X). (required)
     * @param top The top edge of the rectangular crop area in pixels (Y). (required)
     * @param width The width of the rectangular crop area in pixels. (required)
     * @param height The height of the rectangular crop area in pixels. (required)
     * @param imageFile Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported. (required)
     * @return Blob
     * @throws Swagger.ApiException if fails to make API call
     */
    public Blob editCropRectangle(Map<String, Object> params) {
        client.assertNotNull(params.get('left'), 'left');
        client.assertNotNull(params.get('top'), 'top');
        client.assertNotNull(params.get('width'), 'width');
        client.assertNotNull(params.get('height'), 'height');
        client.assertNotNull(params.get('imageFile'), 'imageFile');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('imageFile', (Blob) params.get('imageFile')));

        return (Blob) client.invoke(
            'POST', '/image/edit/crop/rectangle/{left}/{top}/{width}/{height}', '',
            query, form,
            new Map<String, Object>{
                'left' => (Integer) params.get('left'),
                'top' => (Integer) params.get('top'),
                'width' => (Integer) params.get('width'),
                'height' => (Integer) params.get('height')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            Blob.class
        );
    }
    /**
     * Draw a polygon onto an image
     * Draw one or more polygons, with customized visuals, onto an image
     * @param request Polygon drawing request parameters (required)
     * @return Blob
     * @throws Swagger.ApiException if fails to make API call
     */
    public Blob editDrawPolygon(Map<String, Object> params) {
        client.assertNotNull(params.get('request'), 'request');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        return (Blob) client.invoke(
            'POST', '/image/edit/draw/polygon',
            (SwagDrawPolygonRequest) params.get('request'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Apikey' },
            Blob.class
        );
    }
    /**
     * Draw a rectangle onto an image
     * Draw one or more rectangles, with customized visuals, onto an image
     * @param request Draw rectangle parameters (required)
     * @return Blob
     * @throws Swagger.ApiException if fails to make API call
     */
    public Blob editDrawRectangle(Map<String, Object> params) {
        client.assertNotNull(params.get('request'), 'request');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        return (Blob) client.invoke(
            'POST', '/image/edit/draw/rectangle',
            (SwagDrawRectangleRequest) params.get('request'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Apikey' },
            Blob.class
        );
    }
    /**
     * Draw text onto an image
     * Draw one or more pieces of text, with customized visuals, onto an image
     * @param request Draw text parameters (required)
     * @return Blob
     * @throws Swagger.ApiException if fails to make API call
     */
    public Blob editDrawText(Map<String, Object> params) {
        client.assertNotNull(params.get('request'), 'request');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        return (Blob) client.invoke(
            'POST', '/image/edit/draw/text',
            (SwagDrawTextRequest) params.get('request'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Apikey' },
            Blob.class
        );
    }
    /**
     * Add a customizeable drop shadow to an image
     * Add a customizeable drop shadow to the image
     * @param X Horizontal (X) offset of the drop shadow (required)
     * @param Y Vertical (Y) offset of the drop shadow (required)
     * @param sigma Sigma (blur distance) of the drop shadow (required)
     * @param opacity Opacity of the drop shadow; 0 is 0% and 100 is 100% (required)
     * @param imageFile Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported. (required)
     * @return Blob
     * @throws Swagger.ApiException if fails to make API call
     */
    public Blob editDropShadow(Map<String, Object> params) {
        client.assertNotNull(params.get('X'), 'X');
        client.assertNotNull(params.get('Y'), 'Y');
        client.assertNotNull(params.get('sigma'), 'sigma');
        client.assertNotNull(params.get('opacity'), 'opacity');
        client.assertNotNull(params.get('imageFile'), 'imageFile');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('imageFile', (Blob) params.get('imageFile')));

        return (Blob) client.invoke(
            'POST', '/image/edit/drop-shadow/{X}/{Y}/{sigma}/{opacity}', '',
            query, form,
            new Map<String, Object>{
                'X' => (Integer) params.get('X'),
                'Y' => (Integer) params.get('Y'),
                'sigma' => (Integer) params.get('sigma'),
                'opacity' => (Integer) params.get('opacity')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            Blob.class
        );
    }
    /**
     * Invert, negate the colors in the image
     * Inverts (negates) all of the colors in the image.  If the image contains transparency, the transparency will first be removed prior to inverting the image.
     * @param imageFile Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported. (required)
     * @return Blob
     * @throws Swagger.ApiException if fails to make API call
     */
    public Blob editInvert(Map<String, Object> params) {
        client.assertNotNull(params.get('imageFile'), 'imageFile');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('imageFile', (Blob) params.get('imageFile')));

        return (Blob) client.invoke(
            'POST', '/image/edit/invert', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            Blob.class
        );
    }
    /**
     * Remove EXIF data from the image
     * Removes any EXIF data and profiles .
     * @param imageFile Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported. (required)
     * @return Blob
     * @throws Swagger.ApiException if fails to make API call
     */
    public Blob editRemoveExifData(Map<String, Object> params) {
        client.assertNotNull(params.get('imageFile'), 'imageFile');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('imageFile', (Blob) params.get('imageFile')));

        return (Blob) client.invoke(
            'POST', '/image/edit/remove-exif', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            Blob.class
        );
    }
    /**
     * Remove transparency from the image
     * Removes any active transparency in the image.  Effectively renders the image at the same resolution, in the same file format, over a white background, thus removing transparency.
     * @param imageFile Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported. (required)
     * @return Blob
     * @throws Swagger.ApiException if fails to make API call
     */
    public Blob editRemoveTransparency(Map<String, Object> params) {
        client.assertNotNull(params.get('imageFile'), 'imageFile');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('imageFile', (Blob) params.get('imageFile')));

        return (Blob) client.invoke(
            'POST', '/image/edit/remove-transparency', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            Blob.class
        );
    }
    /**
     * Rotate an image any number of degrees
     * Rotates an image by an arbitrary number of degrees
     * @param degrees Degrees to rotate the image; values range from 0.0 to 360.0. (required)
     * @param imageFile Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported. (required)
     * @return Blob
     * @throws Swagger.ApiException if fails to make API call
     */
    public Blob editRotate(Map<String, Object> params) {
        client.assertNotNull(params.get('degrees'), 'degrees');
        client.assertNotNull(params.get('imageFile'), 'imageFile');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('imageFile', (Blob) params.get('imageFile')));

        return (Blob) client.invoke(
            'POST', '/image/edit/rotate/{degrees}/angle', '',
            query, form,
            new Map<String, Object>{
                'degrees' => (Double) params.get('degrees')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            Blob.class
        );
    }
}
