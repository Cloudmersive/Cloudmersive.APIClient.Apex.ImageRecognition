/*
 * imageapi
 * Image Recognition and Processing APIs let you use Machine Learning to recognize and process images, and also perform useful image modification operations.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/**
 * Result of performing a get dominant color operation
 */
public class SwagDominantColorResult implements Swagger.MappedProperties {
    /**
     * True if the operation was successful, false otherwise
     * @return successful
     */
    public Boolean successful { get; set; }

    /**
     * Dominant colors in the image, in order where most dominant color is in the first index position (0), the second most-dominant color is in index position 1 and so on
     * @return dominantColors
     */
    public List<SwagColorResult> dominantColors { get; set; }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'Successful' => 'successful',
        'DominantColors' => 'dominantColors'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    public SwagDominantColorResult() {
        dominantColors = new List<SwagColorResult>();
    }

    public static SwagDominantColorResult getExample() {
        SwagDominantColorResult dominantColorResult = new SwagDominantColorResult();
        dominantColorResult.successful = true;
        dominantColorResult.dominantColors = new List<SwagColorResult>{SwagColorResult.getExample()};
        return dominantColorResult;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof SwagDominantColorResult) {
            SwagDominantColorResult dominantColorResult = (SwagDominantColorResult) obj;
            return this.successful == dominantColorResult.successful
                && this.dominantColors == dominantColorResult.dominantColors;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (successful == null ? 0 : System.hashCode(successful));
        hashCode = (17 * hashCode) + (dominantColors == null ? 0 : System.hashCode(dominantColors));
        return hashCode;
    }
}

