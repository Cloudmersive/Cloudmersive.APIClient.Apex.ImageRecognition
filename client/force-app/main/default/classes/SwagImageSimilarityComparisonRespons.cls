/*
 * imageapi
 * Image Recognition and Processing APIs let you use Machine Learning to recognize and process images, and also perform useful image modification operations.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/**
 * Result of performing an image similarity operation
 */
public class SwagImageSimilarityComparisonRespons implements Swagger.MappedProperties {
    /**
     * True if successful, false otherwise
     * @return successful
     */
    public Boolean successful { get; set; }

    /**
     * True if images are similar, false otherwise
     * @return areImagesSimilar
     */
    public Boolean areImagesSimilar { get; set; }

    /**
     * Similarity score between 0.0 and 1.0, with 1.0 meaning highly similar and 0.0 meaning highly dissimilar
     * @return imageSimilarityScore
     */
    public Double imageSimilarityScore { get; set; }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'Successful' => 'successful',
        'AreImagesSimilar' => 'areImagesSimilar',
        'ImageSimilarityScore' => 'imageSimilarityScore'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    public static SwagImageSimilarityComparisonRespons getExample() {
        SwagImageSimilarityComparisonRespons imageSimilarityComparisonResponse = new SwagImageSimilarityComparisonRespons();
        imageSimilarityComparisonResponse.successful = true;
        imageSimilarityComparisonResponse.areImagesSimilar = true;
        imageSimilarityComparisonResponse.imageSimilarityScore = 1.3579;
        return imageSimilarityComparisonResponse;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof SwagImageSimilarityComparisonRespons) {
            SwagImageSimilarityComparisonRespons imageSimilarityComparisonResponse = (SwagImageSimilarityComparisonRespons) obj;
            return this.successful == imageSimilarityComparisonResponse.successful
                && this.areImagesSimilar == imageSimilarityComparisonResponse.areImagesSimilar
                && this.imageSimilarityScore == imageSimilarityComparisonResponse.imageSimilarityScore;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (successful == null ? 0 : System.hashCode(successful));
        hashCode = (17 * hashCode) + (areImagesSimilar == null ? 0 : System.hashCode(areImagesSimilar));
        hashCode = (17 * hashCode) + (imageSimilarityScore == null ? 0 : System.hashCode(imageSimilarityScore));
        return hashCode;
    }
}

