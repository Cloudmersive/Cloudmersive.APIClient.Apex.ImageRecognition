/*
 * imageapi
 * Image Recognition and Processing APIs let you use Machine Learning to recognize and process images, and also perform useful image modification operations.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/**
 * Individual instance of text occuring in an image; one piece of text
 */
public class SwagTextItem implements Swagger.MappedProperties {
    /**
     * Left X coordinate of the text location; 0 represents the left edge of the input image
     * @return leftX
     */
    public Integer leftX { get; set; }

    /**
     * Top Y coordinate of the text location; 0 represents the top edge of the input image
     * @return topY
     */
    public Integer topY { get; set; }

    /**
     * Width in pixels of the text item
     * @return width
     */
    public Integer width { get; set; }

    /**
     * Height in pixels of the text item
     * @return height
     */
    public Integer height { get; set; }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'LeftX' => 'leftX',
        'TopY' => 'topY',
        'Width' => 'width',
        'Height' => 'height'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    public static SwagTextItem getExample() {
        SwagTextItem textItem = new SwagTextItem();
        textItem.leftX = 123;
        textItem.topY = 123;
        textItem.width = 123;
        textItem.height = 123;
        return textItem;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof SwagTextItem) {
            SwagTextItem textItem = (SwagTextItem) obj;
            return this.leftX == textItem.leftX
                && this.topY == textItem.topY
                && this.width == textItem.width
                && this.height == textItem.height;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (leftX == null ? 0 : System.hashCode(leftX));
        hashCode = (17 * hashCode) + (topY == null ? 0 : System.hashCode(topY));
        hashCode = (17 * hashCode) + (width == null ? 0 : System.hashCode(width));
        hashCode = (17 * hashCode) + (height == null ? 0 : System.hashCode(height));
        return hashCode;
    }
}

