/*
 * imageapi
 * Image Recognition and Processing APIs let you use Machine Learning to recognize and process images, and also perform useful image modification operations.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/**
 * Request to create a PNG of handwriting
 */
public class SwagCreateHandwritingRequest implements Swagger.MappedProperties {
    /**
     * Text to convert to handwriting
     * @return textInput
     */
    public String textInput { get; set; }

    /**
     * Desired width in pixels of the resulting image
     * @return targetWidth
     */
    public Integer targetWidth { get; set; }

    /**
     * Optinoal; Width of the text stroke in pixels; default is 2
     * @return strokeWidth
     */
    public Integer strokeWidth { get; set; }

    /**
     * HTML hexadecimal color, or HTML common color name (e.g. \'black\', \'red\'), for the handwriting
     * @return color
     */
    public String color { get; set; }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'TextInput' => 'textInput',
        'TargetWidth' => 'targetWidth',
        'StrokeWidth' => 'strokeWidth',
        'Color' => 'color'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    public static SwagCreateHandwritingRequest getExample() {
        SwagCreateHandwritingRequest createHandwritingRequest = new SwagCreateHandwritingRequest();
        createHandwritingRequest.textInput = 'aeiou';
        createHandwritingRequest.targetWidth = 123;
        createHandwritingRequest.strokeWidth = 123;
        createHandwritingRequest.color = 'aeiou';
        return createHandwritingRequest;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof SwagCreateHandwritingRequest) {
            SwagCreateHandwritingRequest createHandwritingRequest = (SwagCreateHandwritingRequest) obj;
            return this.textInput == createHandwritingRequest.textInput
                && this.targetWidth == createHandwritingRequest.targetWidth
                && this.strokeWidth == createHandwritingRequest.strokeWidth
                && this.color == createHandwritingRequest.color;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (textInput == null ? 0 : System.hashCode(textInput));
        hashCode = (17 * hashCode) + (targetWidth == null ? 0 : System.hashCode(targetWidth));
        hashCode = (17 * hashCode) + (strokeWidth == null ? 0 : System.hashCode(strokeWidth));
        hashCode = (17 * hashCode) + (color == null ? 0 : System.hashCode(color));
        return hashCode;
    }
}

