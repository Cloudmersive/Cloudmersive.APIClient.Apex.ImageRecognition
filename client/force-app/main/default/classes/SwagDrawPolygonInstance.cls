/*
 * imageapi
 * Image Recognition and Processing APIs let you use Machine Learning to recognize and process images, and also perform useful image modification operations.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/**
 * Polygon instance to draw on an image
 */
public class SwagDrawPolygonInstance implements Swagger.MappedProperties {
    /**
     * Border Color to use - can be a hex value (with #) or HTML common color name.  Transparent colors are supported.
     * @return borderColor
     */
    public String borderColor { get; set; }

    /**
     * Width in pixels of the border.  Pass in 0 to draw a polygon with no border
     * @return borderWidth
     */
    public Double borderWidth { get; set; }

    /**
     * Fill Color to use - can be a hex value (with #) or HTML common color name.  Transparent colors are supported.  Leave blank to not fill the polygon.
     * @return fillColor
     */
    public String fillColor { get; set; }

    /**
     * Points (vertices) which comprise the polygon; valid polygons must have at least 3 points
     * @return points
     */
    public List<SwagPolygonPoint> points { get; set; }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'BorderColor' => 'borderColor',
        'BorderWidth' => 'borderWidth',
        'FillColor' => 'fillColor',
        'Points' => 'points'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    public SwagDrawPolygonInstance() {
        points = new List<SwagPolygonPoint>();
    }

    public static SwagDrawPolygonInstance getExample() {
        SwagDrawPolygonInstance drawPolygonInstance = new SwagDrawPolygonInstance();
        drawPolygonInstance.borderColor = 'aeiou';
        drawPolygonInstance.borderWidth = 1.3579;
        drawPolygonInstance.fillColor = 'aeiou';
        drawPolygonInstance.points = new List<SwagPolygonPoint>{SwagPolygonPoint.getExample()};
        return drawPolygonInstance;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof SwagDrawPolygonInstance) {
            SwagDrawPolygonInstance drawPolygonInstance = (SwagDrawPolygonInstance) obj;
            return this.borderColor == drawPolygonInstance.borderColor
                && this.borderWidth == drawPolygonInstance.borderWidth
                && this.fillColor == drawPolygonInstance.fillColor
                && this.points == drawPolygonInstance.points;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (borderColor == null ? 0 : System.hashCode(borderColor));
        hashCode = (17 * hashCode) + (borderWidth == null ? 0 : System.hashCode(borderWidth));
        hashCode = (17 * hashCode) + (fillColor == null ? 0 : System.hashCode(fillColor));
        hashCode = (17 * hashCode) + (points == null ? 0 : System.hashCode(points));
        return hashCode;
    }
}

