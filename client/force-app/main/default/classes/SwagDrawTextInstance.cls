/*
 * imageapi
 * Image Recognition and Processing APIs let you use Machine Learning to recognize and process images, and also perform useful image modification operations.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/**
 * Text instance to draw on an image
 */
public class SwagDrawTextInstance implements Swagger.MappedProperties {
    /**
     * Text string to draw
     * @return text
     */
    public String text { get; set; }

    /**
     * Font Family to use.  Leave blank to default to "Arial".
     * @return fontFamilyName
     */
    public String fontFamilyName { get; set; }

    /**
     * Font size to use.
     * @return fontSize
     */
    public Double fontSize { get; set; }

    /**
     * Color to use - can be a hex value (with #) or HTML common color name
     * @return color
     */
    public String color { get; set; }

    /**
     * Pixel location of the left edge of the text location
     * @return X
     */
    public Double X { get; set; }

    /**
     * Pixel location of the top edge of the text location
     * @return Y
     */
    public Double Y { get; set; }

    /**
     * Width in pixels of the text box to draw the text in; text will wrap inside this box
     * @return width
     */
    public Double width { get; set; }

    /**
     * Height in pixels of the text box to draw the text in; text will wrap inside this box
     * @return height
     */
    public Double height { get; set; }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'Text' => 'text',
        'FontFamilyName' => 'fontFamilyName',
        'FontSize' => 'fontSize',
        'Color' => 'color',
        'Width' => 'width',
        'Height' => 'height'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    public static SwagDrawTextInstance getExample() {
        SwagDrawTextInstance drawTextInstance = new SwagDrawTextInstance();
        drawTextInstance.text = 'aeiou';
        drawTextInstance.fontFamilyName = 'aeiou';
        drawTextInstance.fontSize = 1.3579;
        drawTextInstance.color = 'aeiou';
        drawTextInstance.X = 1.3579;
        drawTextInstance.Y = 1.3579;
        drawTextInstance.width = 1.3579;
        drawTextInstance.height = 1.3579;
        return drawTextInstance;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof SwagDrawTextInstance) {
            SwagDrawTextInstance drawTextInstance = (SwagDrawTextInstance) obj;
            return this.text == drawTextInstance.text
                && this.fontFamilyName == drawTextInstance.fontFamilyName
                && this.fontSize == drawTextInstance.fontSize
                && this.color == drawTextInstance.color
                && this.X == drawTextInstance.X
                && this.Y == drawTextInstance.Y
                && this.width == drawTextInstance.width
                && this.height == drawTextInstance.height;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (text == null ? 0 : System.hashCode(text));
        hashCode = (17 * hashCode) + (fontFamilyName == null ? 0 : System.hashCode(fontFamilyName));
        hashCode = (17 * hashCode) + (fontSize == null ? 0 : System.hashCode(fontSize));
        hashCode = (17 * hashCode) + (color == null ? 0 : System.hashCode(color));
        hashCode = (17 * hashCode) + (X == null ? 0 : System.hashCode(X));
        hashCode = (17 * hashCode) + (Y == null ? 0 : System.hashCode(Y));
        hashCode = (17 * hashCode) + (width == null ? 0 : System.hashCode(width));
        hashCode = (17 * hashCode) + (height == null ? 0 : System.hashCode(height));
        return hashCode;
    }
}

