/*
 * imageapi
 * Image Recognition and Processing APIs let you use Machine Learning to recognize and process images, and also perform useful image modification operations.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/**
 * Rectangle instance to draw on an image
 */
public class SwagDrawRectangleInstance implements Swagger.MappedProperties {
    /**
     * Border Color to use - can be a hex value (with #) or HTML common color name.  Transparent colors are supported.
     * @return borderColor
     */
    public String borderColor { get; set; }

    /**
     * Width in pixels of the border.  Pass in 0 to draw a rectangle with no border
     * @return borderWidth
     */
    public Double borderWidth { get; set; }

    /**
     * Fill Color to use - can be a hex value (with #) or HTML common color name.  Transparent colors are supported.  Leave blank to not fill the rectangle.
     * @return fillColor
     */
    public String fillColor { get; set; }

    /**
     * Pixel location of the left edge of the rectangle location
     * @return X
     */
    public Double X { get; set; }

    /**
     * Pixel location of the top edge of the rectangle location
     * @return Y
     */
    public Double Y { get; set; }

    /**
     * Width in pixels of the rectangle
     * @return width
     */
    public Double width { get; set; }

    /**
     * Height in pixels of the rectangle
     * @return height
     */
    public Double height { get; set; }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'BorderColor' => 'borderColor',
        'BorderWidth' => 'borderWidth',
        'FillColor' => 'fillColor',
        'Width' => 'width',
        'Height' => 'height'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    public static SwagDrawRectangleInstance getExample() {
        SwagDrawRectangleInstance drawRectangleInstance = new SwagDrawRectangleInstance();
        drawRectangleInstance.borderColor = 'aeiou';
        drawRectangleInstance.borderWidth = 1.3579;
        drawRectangleInstance.fillColor = 'aeiou';
        drawRectangleInstance.X = 1.3579;
        drawRectangleInstance.Y = 1.3579;
        drawRectangleInstance.width = 1.3579;
        drawRectangleInstance.height = 1.3579;
        return drawRectangleInstance;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof SwagDrawRectangleInstance) {
            SwagDrawRectangleInstance drawRectangleInstance = (SwagDrawRectangleInstance) obj;
            return this.borderColor == drawRectangleInstance.borderColor
                && this.borderWidth == drawRectangleInstance.borderWidth
                && this.fillColor == drawRectangleInstance.fillColor
                && this.X == drawRectangleInstance.X
                && this.Y == drawRectangleInstance.Y
                && this.width == drawRectangleInstance.width
                && this.height == drawRectangleInstance.height;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (borderColor == null ? 0 : System.hashCode(borderColor));
        hashCode = (17 * hashCode) + (borderWidth == null ? 0 : System.hashCode(borderWidth));
        hashCode = (17 * hashCode) + (fillColor == null ? 0 : System.hashCode(fillColor));
        hashCode = (17 * hashCode) + (X == null ? 0 : System.hashCode(X));
        hashCode = (17 * hashCode) + (Y == null ? 0 : System.hashCode(Y));
        hashCode = (17 * hashCode) + (width == null ? 0 : System.hashCode(width));
        hashCode = (17 * hashCode) + (height == null ? 0 : System.hashCode(height));
        return hashCode;
    }
}

