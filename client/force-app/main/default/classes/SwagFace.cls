/*
 * imageapi
 * Image Recognition and Processing APIs let you use Machine Learning to recognize and process images, and also perform useful image modification operations.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/**
 * Location of one face in an image
 */
public class SwagFace implements Swagger.MappedProperties {
    /**
     * X coordinate of the left side of the face
     * @return leftX
     */
    public Integer leftX { get; set; }

    /**
     * Y coordinate of the top side of the face
     * @return topY
     */
    public Integer topY { get; set; }

    /**
     * X coordinate of the right side of the face
     * @return rightX
     */
    public Integer rightX { get; set; }

    /**
     * Y coordinate of the bottom side of the face
     * @return bottomY
     */
    public Integer bottomY { get; set; }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'LeftX' => 'leftX',
        'TopY' => 'topY',
        'RightX' => 'rightX',
        'BottomY' => 'bottomY'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    public static SwagFace getExample() {
        SwagFace face = new SwagFace();
        face.leftX = 123;
        face.topY = 123;
        face.rightX = 123;
        face.bottomY = 123;
        return face;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof SwagFace) {
            SwagFace face = (SwagFace) obj;
            return this.leftX == face.leftX
                && this.topY == face.topY
                && this.rightX == face.rightX
                && this.bottomY == face.bottomY;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (leftX == null ? 0 : System.hashCode(leftX));
        hashCode = (17 * hashCode) + (topY == null ? 0 : System.hashCode(topY));
        hashCode = (17 * hashCode) + (rightX == null ? 0 : System.hashCode(rightX));
        hashCode = (17 * hashCode) + (bottomY == null ? 0 : System.hashCode(bottomY));
        return hashCode;
    }
}

