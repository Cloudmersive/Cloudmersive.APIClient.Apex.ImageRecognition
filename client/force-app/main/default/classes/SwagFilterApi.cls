/*
 * imageapi
 * Image Recognition and Processing APIs let you use Machine Learning to recognize and process images, and also perform useful image modification operations.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

public class SwagFilterApi {
    SwagClient client;

    public SwagFilterApi(SwagClient client) {
        this.client = client;
    }

    public SwagFilterApi() {
        this.client = new SwagClient();
    }

    public SwagClient getClient() {
        return this.client;
    }

    /**
     * Convert image to black-and-white grayscale
     * Remove color from the image by converting to a grayscale, black-and-white image
     * @param imageFile Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported. (required)
     * @return Blob
     * @throws Swagger.ApiException if fails to make API call
     */
    public Blob filterBlackAndWhite(Map<String, Object> params) {
        client.assertNotNull(params.get('imageFile'), 'imageFile');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('imageFile', (Blob) params.get('imageFile')));

        return (Blob) client.invoke(
            'POST', '/image/filter/black-and-white', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            Blob.class
        );
    }
    /**
     * Despeckle to remove point noise from the image
     * Remove point noise / despeckle the input image
     * @param imageFile Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported. (required)
     * @return Blob
     * @throws Swagger.ApiException if fails to make API call
     */
    public Blob filterDespeckle(Map<String, Object> params) {
        client.assertNotNull(params.get('imageFile'), 'imageFile');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('imageFile', (Blob) params.get('imageFile')));

        return (Blob) client.invoke(
            'POST', '/image/filter/despeckle', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            Blob.class
        );
    }
    /**
     * Detect and highlight edges in an image
     * Perform an edge detection operation on the input image
     * @param radius Radius in pixels of the edge detection operation; a larger radius will produce a greater effect (required)
     * @param imageFile Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported. (required)
     * @return Blob
     * @throws Swagger.ApiException if fails to make API call
     */
    public Blob filterEdgeDetect(Map<String, Object> params) {
        client.assertNotNull(params.get('radius'), 'radius');
        client.assertNotNull(params.get('imageFile'), 'imageFile');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('imageFile', (Blob) params.get('imageFile')));

        return (Blob) client.invoke(
            'POST', '/image/filter/edge-detect/{radius}', '',
            query, form,
            new Map<String, Object>{
                'radius' => (Integer) params.get('radius')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            Blob.class
        );
    }
    /**
     * Emboss an image
     * Perform an emboss operation on the input image
     * @param radius Radius in pixels of the emboss operation; a larger radius will produce a greater effect (required)
     * @param sigma Sigma, or variance, of the emboss operation (required)
     * @param imageFile Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported. (required)
     * @return Blob
     * @throws Swagger.ApiException if fails to make API call
     */
    public Blob filterEmboss(Map<String, Object> params) {
        client.assertNotNull(params.get('radius'), 'radius');
        client.assertNotNull(params.get('sigma'), 'sigma');
        client.assertNotNull(params.get('imageFile'), 'imageFile');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('imageFile', (Blob) params.get('imageFile')));

        return (Blob) client.invoke(
            'POST', '/image/filter/emboss/{radius}/{sigma}', '',
            query, form,
            new Map<String, Object>{
                'radius' => (Integer) params.get('radius'),
                'sigma' => (Integer) params.get('sigma')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            Blob.class
        );
    }
    /**
     * Perform a guassian blur on the input image
     * Perform a gaussian blur on the input image
     * @param radius Radius in pixels of the blur operation; a larger radius will produce a greater blur effect (required)
     * @param sigma Sigma, or variance, of the gaussian blur operation (required)
     * @param imageFile Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported. (required)
     * @return Blob
     * @throws Swagger.ApiException if fails to make API call
     */
    public Blob filterGaussianBlur(Map<String, Object> params) {
        client.assertNotNull(params.get('radius'), 'radius');
        client.assertNotNull(params.get('sigma'), 'sigma');
        client.assertNotNull(params.get('imageFile'), 'imageFile');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('imageFile', (Blob) params.get('imageFile')));

        return (Blob) client.invoke(
            'POST', '/image/filter/blur/guassian/{radius}/{sigma}', '',
            query, form,
            new Map<String, Object>{
                'radius' => (Integer) params.get('radius'),
                'sigma' => (Integer) params.get('sigma')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            Blob.class
        );
    }
    /**
     * Perform a motion blur on the input image
     * Perform a motion blur on the input image at a specific angle
     * @param radius Radius in pixels of the blur operation; a larger radius will produce a greater blur effect (required)
     * @param sigma Sigma, or variance, of the motion blur operation (required)
     * @param angle Angle of the motion blur in degrees (required)
     * @param imageFile Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported. (required)
     * @return Blob
     * @throws Swagger.ApiException if fails to make API call
     */
    public Blob filterMotionBlur(Map<String, Object> params) {
        client.assertNotNull(params.get('radius'), 'radius');
        client.assertNotNull(params.get('sigma'), 'sigma');
        client.assertNotNull(params.get('angle'), 'angle');
        client.assertNotNull(params.get('imageFile'), 'imageFile');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('imageFile', (Blob) params.get('imageFile')));

        return (Blob) client.invoke(
            'POST', '/image/filter/blur/motion/{radius}/{sigma}/{angle}', '',
            query, form,
            new Map<String, Object>{
                'radius' => (Integer) params.get('radius'),
                'sigma' => (Integer) params.get('sigma'),
                'angle' => (Integer) params.get('angle')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            Blob.class
        );
    }
    /**
     * Posterize the image by reducing distinct colors
     * Reduce the unique number of colors in the image to the specified level
     * @param levels Number of unique colors to retain in the output image (required)
     * @param imageFile Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported. (required)
     * @return Blob
     * @throws Swagger.ApiException if fails to make API call
     */
    public Blob filterPosterize(Map<String, Object> params) {
        client.assertNotNull(params.get('levels'), 'levels');
        client.assertNotNull(params.get('imageFile'), 'imageFile');
        List<Swagger.Param> query = new List<Swagger.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('levels', (Integer) params.get('levels')));

        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('imageFile', (Blob) params.get('imageFile')));

        return (Blob) client.invoke(
            'POST', '/image/filter/posterize', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            Blob.class
        );
    }
    /**
     * Swirl distort the image
     * Swirl distort the image by the specified number of degrees
     * @param degrees Degrees of swirl (required)
     * @param imageFile Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported. (required)
     * @return Blob
     * @throws Swagger.ApiException if fails to make API call
     */
    public Blob filterSwirl(Map<String, Object> params) {
        client.assertNotNull(params.get('degrees'), 'degrees');
        client.assertNotNull(params.get('imageFile'), 'imageFile');
        List<Swagger.Param> query = new List<Swagger.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('degrees', (Integer) params.get('degrees')));

        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('imageFile', (Blob) params.get('imageFile')));

        return (Blob) client.invoke(
            'POST', '/image/filter/swirl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            Blob.class
        );
    }
}
