/*
 * imageapi
 * Image Recognition and Processing APIs let you use Machine Learning to recognize and process images, and also perform useful image modification operations.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/**
 * Individual instance of text occuring in an image; one piece of text
 */
public class SwagFineTextItem implements Swagger.MappedProperties {
    /**
     * X coordinate of the top/left text location; 0 represents the left edge of the input image
     * @return topLeftX
     */
    public Integer topLeftX { get; set; }

    /**
     * Y coordinate of the top/left text location; 0 represents the top edge of the input image
     * @return topLeftY
     */
    public Integer topLeftY { get; set; }

    /**
     * X coordinate of the top/right text location; 0 represents the left edge of the input image
     * @return topRightX
     */
    public Integer topRightX { get; set; }

    /**
     * Y coordinate of the top/right text location; 0 represents the top edge of the input image
     * @return topRightY
     */
    public Integer topRightY { get; set; }

    /**
     * X coordinate of the bottom/left text location; 0 represents the left edge of the input image
     * @return bottomLeftX
     */
    public Integer bottomLeftX { get; set; }

    /**
     * Y coordinate of the bottom/left text location; 0 represents the top edge of the input image
     * @return bottomLeftY
     */
    public Integer bottomLeftY { get; set; }

    /**
     * X coordinate of the bottom/right text location; 0 represents the left edge of the input image
     * @return bottomRightX
     */
    public Integer bottomRightX { get; set; }

    /**
     * Y coordinate of the bottom/right text location; 0 represents the top edge of the input image
     * @return bottomRightY
     */
    public Integer bottomRightY { get; set; }

    /**
     * Width in pixels of the text
     * @return width
     */
    public Integer width { get; set; }

    /**
     * Height in pixels of the text
     * @return height
     */
    public Integer height { get; set; }

    /**
     * Rotation Angle in radians of the text
     * @return angle
     */
    public Double angle { get; set; }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'TopLeftX' => 'topLeftX',
        'TopLeftY' => 'topLeftY',
        'TopRightX' => 'topRightX',
        'TopRightY' => 'topRightY',
        'BottomLeftX' => 'bottomLeftX',
        'BottomLeftY' => 'bottomLeftY',
        'BottomRightX' => 'bottomRightX',
        'BottomRightY' => 'bottomRightY',
        'Width' => 'width',
        'Height' => 'height',
        'Angle' => 'angle'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    public static SwagFineTextItem getExample() {
        SwagFineTextItem fineTextItem = new SwagFineTextItem();
        fineTextItem.topLeftX = 123;
        fineTextItem.topLeftY = 123;
        fineTextItem.topRightX = 123;
        fineTextItem.topRightY = 123;
        fineTextItem.bottomLeftX = 123;
        fineTextItem.bottomLeftY = 123;
        fineTextItem.bottomRightX = 123;
        fineTextItem.bottomRightY = 123;
        fineTextItem.width = 123;
        fineTextItem.height = 123;
        fineTextItem.angle = 1.3579;
        return fineTextItem;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof SwagFineTextItem) {
            SwagFineTextItem fineTextItem = (SwagFineTextItem) obj;
            return this.topLeftX == fineTextItem.topLeftX
                && this.topLeftY == fineTextItem.topLeftY
                && this.topRightX == fineTextItem.topRightX
                && this.topRightY == fineTextItem.topRightY
                && this.bottomLeftX == fineTextItem.bottomLeftX
                && this.bottomLeftY == fineTextItem.bottomLeftY
                && this.bottomRightX == fineTextItem.bottomRightX
                && this.bottomRightY == fineTextItem.bottomRightY
                && this.width == fineTextItem.width
                && this.height == fineTextItem.height
                && this.angle == fineTextItem.angle;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (topLeftX == null ? 0 : System.hashCode(topLeftX));
        hashCode = (17 * hashCode) + (topLeftY == null ? 0 : System.hashCode(topLeftY));
        hashCode = (17 * hashCode) + (topRightX == null ? 0 : System.hashCode(topRightX));
        hashCode = (17 * hashCode) + (topRightY == null ? 0 : System.hashCode(topRightY));
        hashCode = (17 * hashCode) + (bottomLeftX == null ? 0 : System.hashCode(bottomLeftX));
        hashCode = (17 * hashCode) + (bottomLeftY == null ? 0 : System.hashCode(bottomLeftY));
        hashCode = (17 * hashCode) + (bottomRightX == null ? 0 : System.hashCode(bottomRightX));
        hashCode = (17 * hashCode) + (bottomRightY == null ? 0 : System.hashCode(bottomRightY));
        hashCode = (17 * hashCode) + (width == null ? 0 : System.hashCode(width));
        hashCode = (17 * hashCode) + (height == null ? 0 : System.hashCode(height));
        hashCode = (17 * hashCode) + (angle == null ? 0 : System.hashCode(angle));
        return hashCode;
    }
}

