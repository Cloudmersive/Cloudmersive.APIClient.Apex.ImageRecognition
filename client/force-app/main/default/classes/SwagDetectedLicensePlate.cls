/*
 * imageapi
 * Image Recognition and Processing APIs let you use Machine Learning to recognize and process images, and also perform useful image modification operations.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/**
 * License plate found in the image
 */
public class SwagDetectedLicensePlate implements Swagger.MappedProperties {
    /**
     * Text from the license plate, highest-confidence result
     * @return licensePlateTextBestMatch
     */
    public String licensePlateTextBestMatch { get; set; }

    /**
     * Alternate text from the license plate, based on second-highest-confidence result
     * @return licensePlateTextRunnerUp
     */
    public String licensePlateTextRunnerUp { get; set; }

    /**
     * X location of the left edge of the license plate, starting from the left edge of the photo (X = 0)
     * @return locationX
     */
    public Integer locationX { get; set; }

    /**
     * Y location of the top edge of the license plate, starting from the top edge of the photo (Y = 0)
     * @return locationY
     */
    public Integer locationY { get; set; }

    /**
     * Width of the license plate\'s location in pixels
     * @return width
     */
    public Integer width { get; set; }

    /**
     * Height of the license plate\'s location in pixels
     * @return height
     */
    public Integer height { get; set; }

    /**
     * Confidence score on a range of 0.0 - 1.0 of the accuracy of the detected license plate, with higher scores being better; values about 0.75 are high confidence
     * @return licensePlateRecognitionConfidenceLevel
     */
    public Double licensePlateRecognitionConfidenceLevel { get; set; }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'LicensePlateText_BestMatch' => 'licensePlateTextBestMatch',
        'LicensePlateText_RunnerUp' => 'licensePlateTextRunnerUp',
        'LocationX' => 'locationX',
        'LocationY' => 'locationY',
        'Width' => 'width',
        'Height' => 'height',
        'LicensePlateRecognitionConfidenceLevel' => 'licensePlateRecognitionConfidenceLevel'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    public static SwagDetectedLicensePlate getExample() {
        SwagDetectedLicensePlate detectedLicensePlate = new SwagDetectedLicensePlate();
        detectedLicensePlate.licensePlateTextBestMatch = 'aeiou';
        detectedLicensePlate.licensePlateTextRunnerUp = 'aeiou';
        detectedLicensePlate.locationX = 123;
        detectedLicensePlate.locationY = 123;
        detectedLicensePlate.width = 123;
        detectedLicensePlate.height = 123;
        detectedLicensePlate.licensePlateRecognitionConfidenceLevel = 1.3579;
        return detectedLicensePlate;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof SwagDetectedLicensePlate) {
            SwagDetectedLicensePlate detectedLicensePlate = (SwagDetectedLicensePlate) obj;
            return this.licensePlateTextBestMatch == detectedLicensePlate.licensePlateTextBestMatch
                && this.licensePlateTextRunnerUp == detectedLicensePlate.licensePlateTextRunnerUp
                && this.locationX == detectedLicensePlate.locationX
                && this.locationY == detectedLicensePlate.locationY
                && this.width == detectedLicensePlate.width
                && this.height == detectedLicensePlate.height
                && this.licensePlateRecognitionConfidenceLevel == detectedLicensePlate.licensePlateRecognitionConfidenceLevel;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (licensePlateTextBestMatch == null ? 0 : System.hashCode(licensePlateTextBestMatch));
        hashCode = (17 * hashCode) + (licensePlateTextRunnerUp == null ? 0 : System.hashCode(licensePlateTextRunnerUp));
        hashCode = (17 * hashCode) + (locationX == null ? 0 : System.hashCode(locationX));
        hashCode = (17 * hashCode) + (locationY == null ? 0 : System.hashCode(locationY));
        hashCode = (17 * hashCode) + (width == null ? 0 : System.hashCode(width));
        hashCode = (17 * hashCode) + (height == null ? 0 : System.hashCode(height));
        hashCode = (17 * hashCode) + (licensePlateRecognitionConfidenceLevel == null ? 0 : System.hashCode(licensePlateRecognitionConfidenceLevel));
        return hashCode;
    }
}

